{"version":3,"sources":["logo.svg","component/Jumbotron/index.js","utils/EmployeeContext.js","component/Textbox/index.js","component/Table/index.js","utils/api.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Jumbotron","props","className","EmployeeContext","createContext","employeeList","orginalList","search","Textbox","handleInputChange","employeeState","useContext","type","name","value","onChange","Table","scope","onClick","handleSubmit","length","map","employee","id","key","src","picture","thumbnail","first","last","phone","email","moment","dob","date","format","axios","get","App","useState","originalList","setEmployeeState","useEffect","API","then","res","console","log","data","results","Provider","event","target","newEmployeeList","filter","person","toLowerCase","indexOf","columnName","sort","a","b","localeCompare","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.578eb4f1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React , {useContext}from \"react\";\nimport \"./index.css\";\n\n\n// Construtors are reusable objects, allows you to reuse the same setup through functions \nexport  default function Jumbotron(props) {\n   \n  return (\n    <div className=\"jumbotron\">\n      <h1 className=\"jumboh1\" >Employee Directory</h1>\n      \n    </div>\n  );\n}\n","import React,{createContext} from \"react\"\n\nconst EmployeeContext = createContext({\n    employeeList: [],\n    orginalList: [],\n    search: \"\"\n})\n\nexport default EmployeeContext","import React , {useContext}from \"react\";\nimport EmployeeContext from \"../../utils/EmployeeContext\"\nexport default function Textbox({handleInputChange}){\n    const employeeState = useContext(EmployeeContext)\n   return(\n       <div>\n           <input type=\"text\" name=\"search\" value= {employeeState.search} onChange = {handleInputChange}  className=\"textBox\"/>\n          \n       </div>\n   )\n}","import React, { useContext } from \"react\";\nimport EmployeeContext from \"../../utils/EmployeeContext\";\nimport moment from \"moment\";\nexport default function Table(props) {\n  let employeeState = useContext(EmployeeContext);\n  return (\n    <div>\n      {/* {console.log(\"employee: \", employeeState.employeeList)} */}\n      <table className=\"table\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Image</th>\n            <th\n              scope=\"col\"\n              onClick={() => {\n                props.handleSubmit(\"first\");\n              }}\n            >\n              First Name\n            </th>\n            <th\n              scope=\"col\"\n              onClick={() => {\n                props.handleSubmit(\"last\");\n              }}\n            >\n              Last Name\n            </th>\n            <th scope=\"col\">Phone</th>\n            <th scope=\"col\">Email</th>\n            <th scope=\"col\">DOB</th>\n          </tr>\n        </thead>\n        <tbody>\n          {employeeState.employeeList.length > 0\n            ? employeeState.employeeList.map((employee, id) => {\n                return (\n                  <tr key={id}>\n                    <td>\n                      <img src={employee.picture.thumbnail} />\n                    </td>\n\n                    <td>{employee.name.first}</td>\n                    <td>{employee.name.last}</td>\n                    <td>{employee.phone}</td>\n                    <td>{employee.email}</td>\n                    <td>\n                      {moment(employee.dob.date, \"YYYY-MM-DD\").format(\n                        \"MM/DD/YYYY\"\n                      )}\n                    </td>\n                  </tr>\n                );\n              })\n            : \"\"}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","import axios from \"axios\"\nexport default {\ngetEmployee:function(){\n    return axios.get(\"https://randomuser.me/api/?results=100\")\n}\n}","import React, { useState, useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Jumbotron from \"./component/Jumbotron\";\nimport Textbox from \"./component/Textbox\";\nimport Table from \"./component/Table\";\nimport EmployeeContext from \"./utils/EmployeeContext\";\n\nimport API from \"./utils/api\";\n\nfunction App() {\n  const [employeeState, setEmployeeState] = useState({\n    employeeList: [],\n    originalList: [],\n    search: \"\",\n  });\n\n  useEffect(() => {\n    API.getEmployee().then((res) => {\n      console.log(res.data.results);\n      setEmployeeState({\n        ...employeeState,\n        employeeList: res.data.results,\n        originalList: res.data.results,\n      });\n    });\n  }, []);\n\n  const handleSubmit = (columnName) => {\n    let newEmployeeList = employeeState.employeeList.sort((a, b) => {\n      return a.name[columnName].localeCompare(b.name[columnName]);\n    });\n\n     setEmployeeState({\n       ...employeeState, \n       employeeList:newEmployeeList\n     })\n\n  };\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n\n    setEmployeeState({\n      ...employeeState,\n\n      [name]: value,\n    });\n\n    const newEmployeeList = employeeState.originalList.filter((person) => {\n      return (\n        person.name.first.toLowerCase().indexOf(value.toLowerCase()) > -1 ||\n        person.name.last.toLowerCase().indexOf(value.toLowerCase()) > -1\n      );\n    });\n\n    setEmployeeState({\n      ...employeeState,\n\n      employeeList: newEmployeeList,\n      search: value,\n    });\n    console.log(employeeState.employeeList);\n  };\n  return (\n    <EmployeeContext.Provider value={employeeState}>\n      <Jumbotron />\n      <Textbox handleInputChange={handleInputChange} />\n      <br />\n      <Table handleSubmit = {\n        handleSubmit\n      }/>\n    </EmployeeContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}